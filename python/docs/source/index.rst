Welcome to ``mldeploy``'s documentation!
========================================

.. contents::
    :depth: 2

What is ``mldeploy``?
---------------------
The ``mldeploy`` module provides a CLI (command line interface) for creating, building, deploying and managing machine-learning projects on cloud architecture. For example, models can be deployed across multiple instances to multiplex hyperparameter searches, or deployed into auto-scaling clusters ensure cost optimization when using trained models for inference.

Install
-------
``mldeploy`` can be installed using the Python package index PyPI by calling the install command from ``pip``:
::

    >>> pip install mldeploy

Commands
--------
``create``
**********
Creates a new ``mldeploy`` project with a specific name and location. This command sets up the project folder, default configuration file, and registers the project to the ``mldeploy`` local project registry.

.. csv-table:: 
   :header: "Argument", "Description"
   :widths: 25, 95

   "``--name``", "Name to give the project. Writing ``--name`` is optional."
   "``--path``", "The absolute path to where the project files should be stored."

Call the ``create`` method from the command line to create a new project named "my-next-app" and place it in the local app-data folder (folder name will be displayed upon successful creation):
::

    >>> mldeploy create my-next-app

Or specify a path for the project folder:
::
    
    >>> mldeploy create my-next-app --path /home/projects/deployments


``build``
*********
Given the ``config.yml`` file, this command builds the Dockerfile (if none provided) and Docker image (if none provided) for the defined project. Options set in the configuration file dictate the use of custom Dockerfiles and images. Additionally, configuration options dictate whether or not the autogenerated Docker images will be over-written upon the next call of ``build``.

.. csv-table:: 
   :header: "Argument", "Description"
   :widths: 25, 95

   "``--name``", "Name of the project to build. Writing ``--name`` is optional."

Call the ``build`` method from the command line for a project named "my-new-app":
::

    >>> mldeploy build my-new-app


``ls``
******
Lists the projects that are registered on the local machine. Displays the project name, location of the project folder, and the name of the Docker image registered to the project.

Call the ``ls`` method from the command line:
::

    >>> mldeploy ls


``deploy``
**********
Deploys a project. --Work in progress--

.. csv-table:: 
   :header: "Argument", "Description"
   :widths: 25, 95

   "``--name``", "Name of the project to deploy. Writing ``--name`` is optional."

Call the ``deploy`` method from the command line for a project named "my-new-app":
::

    >>> mldeploy deploy my-new-app


``delete``
**********
Permanently deletes the project folder and contents including the configuration file, autogenerated Dockerfile, and the autogenerated Docker image. Does not affect files not contained within the project folder, nor does this command delete custom Docker images (e.g. those not autogenerated and autonamed by the ``build`` method).

Note that upon calling the ``delete`` method you will be asked to re-type the name of the project you wish to delete to confirm your decision. If you wish to cancel the delete operation, simply type the wrong name or no name and press the ENTER key, and the delete operation will abort.

.. csv-table:: 
   :header: "Argument", "Description"
   :widths: 25, 95

   "``--name``", "Name of the project to delete. Writing ``--name`` is optional."

Call the ``delete`` method from the command line for a project named "my-old-app":
::

    >>> mldeploy delete my-old-app



.. toctree::
   :maxdepth: 2
   :caption: Functions:

   mldeploy_functions

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
