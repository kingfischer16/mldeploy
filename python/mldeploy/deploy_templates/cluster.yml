AWSTemplateFormatVersion: '2010-09-09'
Description: Template for the deployment of the ECS cluster.
Parameters:
  ProjectName:
    Type: String
    Description: A name that will be used for namespacing resources.
  VpcId:
    Type: String
    Description: The VPC ID.
  PublicSubnetOne:
    Type: String
  PublicSubnetTwo:
    Type: String
  ContainerSecurityGroup:
    Type: String
    Description: The security group for the EC2 instances in the ECS cluster.
  EcsInstanceRole:
    Type: String
  InstanceType:
    Description: Class of EC2 instance used to host containers. Choose t3 for testing, m5 for general purpose, c5 for CPU intensive services, and r5 for memory intensive services.
    Type: String
    Default: t3.micro
    AllowedValues: [ t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
     m5.large, m5.xlarge, m5.2large, m5.4xlarge, m5.12xlarge, m5.24large,
     c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge, c5.18xlarge,
     r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r5.12xlarge, r5.24xlarge ]
    ConstraintDescription: Please choose a valid instance type.
  DesiredCapacity:
    Type: Number
    Description: Number of EC2 instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Description: Maximum number of EC2 instances that can be launched in your ECS cluster.
  ECSAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: The Amazon Machine Image ID used for the cluster, leave it as the default value to get the latest AMI
  EcrRepositoryUri:
    Type: String
    Description: The ECR repository which contains the required docker image.
  
  TaskDefinition:
    Type: String
    Default: 'arn:aws:ecs:eu-north-1:693921741570:task-definition/td-simplehttpd-ec2:5'
    Description: Task definition for the service.

Resources:
  
  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${ProjectName}-cluster-ec2"
  
  # Service and task definition.
  EcsService:
    Type: AWS::ECS::Service
    Properties: 
      # CapacityProviderStrategy: 
      #   - Base: 1
      #     CapacityProvider: !Ref CapProvider
      #     Weight: 1
      Cluster: !Ref ECSCluster
      #DeploymentConfiguration: 
      #  DeploymentConfiguration
      #DeploymentController: 
      #  DeploymentController
      DesiredCount: !Ref DesiredCapacity
      #EnableECSManagedTags: Boolean
      #HealthCheckGracePeriodSeconds: Integer
      #LaunchType: EC2
      #LoadBalancers: 
      #  - LoadBalancer
      #NetworkConfiguration: 
      #  NetworkConfiguration
      #PlacementConstraints: 
      #  - PlacementConstraint
      PlacementStrategies: 
        - Field: 'cpu'
          Type: 'binpack'
      #PlatformVersion: String
      #PropagateTags: String
      #Role: 'arn:aws:iam::693921741570:role/ecsAutoscalingRole'
      #SchedulingStrategy: String
      #ServiceArn: String
      ServiceName: simplehttp-ec2-service
      #ServiceRegistries: 
      #  - ServiceRegistry
      # Tags: 
      #   - Key: ProjectName
      #     Value: !Ref ProjectName
      TaskDefinition: !Ref TaskDefinition
  
  # SimmpleHttpTask:
  #   Type: AWS::ECS::TaskDefinition
  #   Properties: 
  #     ContainerDefinitions: 
  #       - ContainerDefinition
  #     Cpu: String
  #     ExecutionRoleArn: String
  #     Family: String
  #     InferenceAccelerators: 
  #       - InferenceAccelerator
  #     IpcMode: String
  #     Memory: String
  #     NetworkMode: String
  #     PidMode: String
  #     PlacementConstraints: 
  #       - Type: 'distinctInstance'
  #     ProxyConfiguration: 
  #       ProxyConfiguration
  #     RequiresCompatibilities: 
  #       - String
  #     Tags: 
  #       - Tag
  #     TaskRoleArn: String
  #     Volumes: 
  #       - Volume

  # Autoscaling group. This launches the actual EC2 instances that will register
  # themselves as members of the cluster, and run the docker containers.
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "mldeploy-${ProjectName}-AutoScalingGroup"
      VPCZoneIdentifier:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      LaunchConfigurationName: !Ref ContainerInstances
      MinSize: 0
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
  
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref 'ECSAMI'
      SecurityGroups: [!Ref 'ContainerSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
  
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref EcsInstanceRole ]
  

Outputs:
  ClusterName:
    Description: The name of the ECS cluster.
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${ProjectName}:ClusterName
  AutoScalingGroupArn:
    Description: The ARN of the Autoscaling group.
    Value: !Ref ECSAutoScalingGroup
    Export:
      Name: !Sub ${ProjectName}:AutoScalingGroup:Arn
  ServiceName:
    Description: The ECS service.
    Value: !GetAtt EcsService.Name
